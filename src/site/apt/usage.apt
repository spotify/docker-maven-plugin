Usage

* Build Goal

** Basic usage

  Only the imageName parameter is required.

+------------+
mvn docker:build -DimageName=registry:80/spotify/serviceName
+------------+

** Build image on another host

  Since docker uses a client/server model, it's possible to build your image on another host
  running docker. This is useful if you do not have docker installed locally.

+------------+
mvn docker:build -DimageName=registry:80/spotify/serviceName -DdockerHost=http://docker-host:4160
+------------+

** Setting imageName in pom.xml

  The name of a project's image will usually never change, so you can specify it in your pom.xml.
  That way you simply run <<<mvn docker:build>>> and the image name in the pom will be used.

+------------+
<plugin>
  <groupId>com.spotify</groupId>
  <artifactId>docker-maven-plugin</artifactId>
  <version>0.0.3</version>
  <configuration>
    <imageName>registry:80/spotify/serviceName</imageName>
  </configuration>
</plugin>
+------------+

** Binding to a lifecycle phase

  For convenience, you may want to bind the build goal to the <<<package>>> lifecycle phase. This way
  the image will be built every time you run <<<mvn package>>>.

+------------+
<plugin>
  <groupId>com.spotify</groupId>
  <artifactId>docker-maven-plugin</artifactId>
  <version>0.0.3</version>
  <configuration>
    <imageName>registry:80/spotify/serviceName</imageName>
  </configuration>
  <executions>
    <execution>
      <goals>
        <goal>build</goal>
      </goals>
      <phase>package</phase>
    </execution>
  </executions>
</plugin>
+------------+

** Including resources

  The plugin can copy files either directly into the image, or into the dockerDirectory if a
  Dockerfile is being used. Resources are specified using the standard resource elements. This
  example will copy all jar files from the project's build directory into '/jars' in the image.

+------------+
<plugin>
  <groupId>com.spotify</groupId>
  <artifactId>docker-maven-plugin</artifactId>
  <version>0.0.3</version>
  <configuration>
    <imageName>registry:80/spotify/serviceName</imageName>
    <resources>
      <resource>
        <targetPath>jars</targetPath>
        <directory>${project.build.directory}</directory>
        <include>*.jar</include>
      </resource>
    </resources>
  </configuration>
</plugin>
+------------+

* Push goal

  Like build, push requires that the image name be specified. This example shows how to specify it on
  the command line, but it will be picked up automatically from the pom.xml if it is specified there
  as demonstrated above.

+------------+
mvn docker:push -DimageName=registry:80/spotify/serviceName
+------------+

* Tag goal

  The following example takes the image <<<registry:80/spotify/serviceName:latest>>> and
  creates a new tag using the most recent git commit id, producing something like
  <<<registry:80/spotify/serviceName:e17ec52>>>

+------------+
<plugin>
  <groupId>com.spotify</groupId>
  <artifactId>docker-maven-plugin</artifactId>
  <version>0.0.3</version>
  <executions>
    <execution>
    <id>tag</id>
      <goals>
        <goal>tag</goal>
      </goals>
      <phase>package</phase>
      <configuration>
        <image>registry:80/spotify/serviceName:latest</image>
        <newName>registry:80/spotify/serviceName</newName>
        <useGitCommitId>true</useGitCommitId>
      </configuration>
    </execution>
  </executions>
</plugin>
+------------+
